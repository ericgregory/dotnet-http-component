// Generated by `wit-bindgen` 0.30.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace ProxyWorld.wit.imports.wasi.random.v0_2_0
{
    public static class RandomInterop {

        internal static class GetRandomBytesWasmInterop
        {
            [DllImport("wasi:random/random@0.2.0", EntryPoint = "get-random-bytes"), WasmImportLinkage]
            internal static extern void wasmImportGetRandomBytes(long p0, nint p1);

        }

        public  static unsafe byte[] GetRandomBytes(ulong len)
        {

            var retArea = new uint[2];
            fixed (uint* retAreaByte0 = &retArea[0])
            {
                var ptr = (nint)retAreaByte0;
                GetRandomBytesWasmInterop.wasmImportGetRandomBytes(unchecked((long)(len)), ptr);

                var array = new byte[BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))];
                new Span<byte>((void*)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 0), 4))), BitConverter.ToInt32(new Span<byte>((void*)(ptr + 4), 4))).CopyTo(new Span<byte>(array));
                return array;
            }

            //TODO: free alloc handle (interopString) if exists
        }

        internal static class GetRandomU64WasmInterop
        {
            [DllImport("wasi:random/random@0.2.0", EntryPoint = "get-random-u64"), WasmImportLinkage]
            internal static extern long wasmImportGetRandomU64();

        }

        public  static unsafe ulong GetRandomU64()
        {
            var result =  GetRandomU64WasmInterop.wasmImportGetRandomU64();
            return unchecked((ulong)(result));

            //TODO: free alloc handle (interopString) if exists
        }

    }
}
