// Generated by `wit-bindgen` 0.30.0. DO NOT EDIT!
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Collections;
using System.Runtime.InteropServices;
using System.Text;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace ProxyWorld.wit.imports.wasi.clocks.v0_2_0
{
    public static class WallClockInterop {

        internal static class NowWasmInterop
        {
            [DllImport("wasi:clocks/wall-clock@0.2.0", EntryPoint = "now"), WasmImportLinkage]
            internal static extern void wasmImportNow(nint p0);

        }

        public  static unsafe global::ProxyWorld.wit.imports.wasi.clocks.v0_2_0.IWallClock.Datetime Now()
        {

            var retArea = new ulong[2];
            fixed (ulong* retAreaByte0 = &retArea[0])
            {
                var ptr = (nint)retAreaByte0;
                NowWasmInterop.wasmImportNow(ptr);
                return new global::ProxyWorld.wit.imports.wasi.clocks.v0_2_0.IWallClock.Datetime (
                unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 0), 8)))), unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4)))));
            }

            //TODO: free alloc handle (interopString) if exists
        }

        internal static class ResolutionWasmInterop
        {
            [DllImport("wasi:clocks/wall-clock@0.2.0", EntryPoint = "resolution"), WasmImportLinkage]
            internal static extern void wasmImportResolution(nint p0);

        }

        public  static unsafe global::ProxyWorld.wit.imports.wasi.clocks.v0_2_0.IWallClock.Datetime Resolution()
        {

            var retArea = new ulong[2];
            fixed (ulong* retAreaByte0 = &retArea[0])
            {
                var ptr = (nint)retAreaByte0;
                ResolutionWasmInterop.wasmImportResolution(ptr);
                return new global::ProxyWorld.wit.imports.wasi.clocks.v0_2_0.IWallClock.Datetime (
                unchecked((ulong)(BitConverter.ToInt64(new Span<byte>((void*)(ptr + 0), 8)))), unchecked((uint)(BitConverter.ToInt32(new Span<byte>((void*)(ptr + 8), 4)))));
            }

            //TODO: free alloc handle (interopString) if exists
        }

    }
}
